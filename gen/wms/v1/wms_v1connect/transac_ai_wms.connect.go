//
// File version: 1.0.0
// Last updated: 2024-11-02 13:58:00 EST
// Last updated by: pkural

// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: wms/v1/transac_ai_wms.proto

package wms_v1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	http "net/http"
	strings "strings"
	v1 "transacai-wms/gen/wms/v1"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// WMSServiceName is the fully-qualified name of the WMSService service.
	WMSServiceName = "wms.v1.WMSService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// WMSServiceGenerateInsightsProcedure is the fully-qualified name of the WMSService's
	// GenerateInsights RPC.
	WMSServiceGenerateInsightsProcedure = "/wms.v1.WMSService/GenerateInsights"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	wMSServiceServiceDescriptor                = v1.File_wms_v1_transac_ai_wms_proto.Services().ByName("WMSService")
	wMSServiceGenerateInsightsMethodDescriptor = wMSServiceServiceDescriptor.Methods().ByName("GenerateInsights")
)

// WMSServiceClient is a client for the wms.v1.WMSService service.
type WMSServiceClient interface {
	// Method to generate insights
	GenerateInsights(context.Context, *connect.Request[v1.GenerateInsightsRequest]) (*connect.Response[v1.GenerateInsightsResponse], error)
}

// NewWMSServiceClient constructs a client for the wms.v1.WMSService service. By default, it uses
// the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewWMSServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) WMSServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &wMSServiceClient{
		generateInsights: connect.NewClient[v1.GenerateInsightsRequest, v1.GenerateInsightsResponse](
			httpClient,
			baseURL+WMSServiceGenerateInsightsProcedure,
			connect.WithSchema(wMSServiceGenerateInsightsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// wMSServiceClient implements WMSServiceClient.
type wMSServiceClient struct {
	generateInsights *connect.Client[v1.GenerateInsightsRequest, v1.GenerateInsightsResponse]
}

// GenerateInsights calls wms.v1.WMSService.GenerateInsights.
func (c *wMSServiceClient) GenerateInsights(ctx context.Context, req *connect.Request[v1.GenerateInsightsRequest]) (*connect.Response[v1.GenerateInsightsResponse], error) {
	return c.generateInsights.CallUnary(ctx, req)
}

// WMSServiceHandler is an implementation of the wms.v1.WMSService service.
type WMSServiceHandler interface {
	// Method to generate insights
	GenerateInsights(context.Context, *connect.Request[v1.GenerateInsightsRequest]) (*connect.Response[v1.GenerateInsightsResponse], error)
}

// NewWMSServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewWMSServiceHandler(svc WMSServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	wMSServiceGenerateInsightsHandler := connect.NewUnaryHandler(
		WMSServiceGenerateInsightsProcedure,
		svc.GenerateInsights,
		connect.WithSchema(wMSServiceGenerateInsightsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/wms.v1.WMSService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case WMSServiceGenerateInsightsProcedure:
			wMSServiceGenerateInsightsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedWMSServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedWMSServiceHandler struct{}

func (UnimplementedWMSServiceHandler) GenerateInsights(context.Context, *connect.Request[v1.GenerateInsightsRequest]) (*connect.Response[v1.GenerateInsightsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("wms.v1.WMSService.GenerateInsights is not implemented"))
}
