// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: igs/v1/transac_ai_igs.proto

package igs_v1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	http "net/http"
	strings "strings"
	v1 "transacai-wms/gen/igs/v1"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// InsightsGenerationServiceName is the fully-qualified name of the InsightsGenerationService
	// service.
	InsightsGenerationServiceName = "igs.v1.InsightsGenerationService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// InsightsGenerationServiceGenerateInsightsProcedure is the fully-qualified name of the
	// InsightsGenerationService's GenerateInsights RPC.
	InsightsGenerationServiceGenerateInsightsProcedure = "/igs.v1.InsightsGenerationService/GenerateInsights"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	insightsGenerationServiceServiceDescriptor                = v1.File_igs_v1_transac_ai_igs_proto.Services().ByName("InsightsGenerationService")
	insightsGenerationServiceGenerateInsightsMethodDescriptor = insightsGenerationServiceServiceDescriptor.Methods().ByName("GenerateInsights")
)

// InsightsGenerationServiceClient is a client for the igs.v1.InsightsGenerationService service.
type InsightsGenerationServiceClient interface {
	GenerateInsights(context.Context, *connect.Request[v1.GenerateInsightsRequest]) (*connect.Response[v1.GenerateInsightsResponse], error)
}

// NewInsightsGenerationServiceClient constructs a client for the igs.v1.InsightsGenerationService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewInsightsGenerationServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) InsightsGenerationServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &insightsGenerationServiceClient{
		generateInsights: connect.NewClient[v1.GenerateInsightsRequest, v1.GenerateInsightsResponse](
			httpClient,
			baseURL+InsightsGenerationServiceGenerateInsightsProcedure,
			connect.WithSchema(insightsGenerationServiceGenerateInsightsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// insightsGenerationServiceClient implements InsightsGenerationServiceClient.
type insightsGenerationServiceClient struct {
	generateInsights *connect.Client[v1.GenerateInsightsRequest, v1.GenerateInsightsResponse]
}

// GenerateInsights calls igs.v1.InsightsGenerationService.GenerateInsights.
func (c *insightsGenerationServiceClient) GenerateInsights(ctx context.Context, req *connect.Request[v1.GenerateInsightsRequest]) (*connect.Response[v1.GenerateInsightsResponse], error) {
	return c.generateInsights.CallUnary(ctx, req)
}

// InsightsGenerationServiceHandler is an implementation of the igs.v1.InsightsGenerationService
// service.
type InsightsGenerationServiceHandler interface {
	GenerateInsights(context.Context, *connect.Request[v1.GenerateInsightsRequest]) (*connect.Response[v1.GenerateInsightsResponse], error)
}

// NewInsightsGenerationServiceHandler builds an HTTP handler from the service implementation. It
// returns the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewInsightsGenerationServiceHandler(svc InsightsGenerationServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	insightsGenerationServiceGenerateInsightsHandler := connect.NewUnaryHandler(
		InsightsGenerationServiceGenerateInsightsProcedure,
		svc.GenerateInsights,
		connect.WithSchema(insightsGenerationServiceGenerateInsightsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/igs.v1.InsightsGenerationService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case InsightsGenerationServiceGenerateInsightsProcedure:
			insightsGenerationServiceGenerateInsightsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedInsightsGenerationServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedInsightsGenerationServiceHandler struct{}

func (UnimplementedInsightsGenerationServiceHandler) GenerateInsights(context.Context, *connect.Request[v1.GenerateInsightsRequest]) (*connect.Response[v1.GenerateInsightsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("igs.v1.InsightsGenerationService.GenerateInsights is not implemented"))
}
